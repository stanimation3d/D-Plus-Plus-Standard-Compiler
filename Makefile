CXX = clang++

# Path to llvm-config utility
# Adjust this if llvm-config is not in your PATH
LLVM_CONFIG = llvm-config

# Compiler flags
# -Wall -Wextra: Enable extensive warnings
# -g: Include debug information
# -std=c++17: Use C++17 standard
# -I.: Include current directory for headers (assuming project root)
# -I<dir>: Include other directories for headers
# $(shell $(LLVM_CONFIG) --cflags): Get LLVM compiler flags (includes, defines, etc.)
# -MMD -MP: Generate dependency files (.d) for headers
CXXFLAGS = -Wall -Wextra -g -std=c++17 -I.
CXXFLAGS += -I./lexer -I./parser -I./sema -I./irgen -I./codegen -I./utils
CXXFLAGS += $(shell $(LLVM_CONFIG) --cflags)
CXXFLAGS += -MMD -MP

# Linker flags
# $(shell $(LLVM_CONFIG) --libs --system-libs): Get LLVM libraries and their dependencies
LDFLAGS = $(shell $(LLVM_CONFIG) --libs --system-libs)

# Source files (.cpp) - List all your implementation files
# wildcard finds files matching the pattern
SRCS = main.cpp \
       lexer/Lexer.cpp \
       parser/Parser.cpp \
       sema/SemanticAnalyzer.cpp \
       sema/SymbolTable.cpp \
       sema/TypeSystem.cpp \
       sema/BorrowChecker.cpp \
       irgen/IRGenerator.cpp \
       codegen/CodeGen.cpp \
       utils/ErrorReporter.cpp \
       utils/Utils.cpp

# Object files (.o) - Replace .cpp with .o in the source file list
# patsubst (pattern substitute) replaces the file extension
OBJS = $(patsubst %.cpp,%.o,$(SRCS))

# Name of the final executable
TARGET = dppc

# --- Targets ---

# Default target: build the executable
all: $(TARGET)

# Rule to build the executable by linking the object files
$(TARGET): $(OBJS)
	$(CXX) $(OBJS) $(LDFLAGS) -o $@

# Pattern rule to compile any .cpp file into a .o file
# $<: the first prerequisite (the .cpp file)
# $@: the target (the .o file)
# -c: compile only, do not link
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Include the dependency files generated by -MMD.
# These files list header dependencies, so make knows when to recompile.
# The hyphen before include means ignore errors if the file doesn't exist (first build).
-include $(OBJS:.o=.d)

# Clean target: remove generated files
clean:
	# Remove object files and dependency files in subdirectories
	rm -f lexer/*.o lexer/*.d
	rm -f parser/*.o parser/*.d
	rm -f sema/*.o sema/*.d
	rm -f irgen/*.o irgen/*.d
	rm -f codegen/*.o codegen/*.d
	rm -f utils/*.o utils/*.d
	# Remove main object file and the executable
	rm -f main.o main.d $(TARGET)

# Phony targets are not actual files.
# Declaring them phony prevents conflicts if files with these names exist.
.PHONY: all clean
